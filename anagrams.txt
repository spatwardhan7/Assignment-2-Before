AnagramsBookmark Suggest Edit
Given an array of strings, return all groups of strings that are anagrams. Represent a group by a list of integers representing the index in the original list. Look at the sample case for clarification.

 Anagram : a word, phrase, or name formed by rearranging the letters of another, such as 'spar', formed from 'rasp' 
 Note: All inputs will be in lower-case. 
Example :

Input : cat dog god tca
Output : [[1, 4], [2, 3]]
cat and tca are anagrams which correspond to index 1 and 4. 
dog and god are another set of anagrams which correspond to index 2 and 3.
The indices are 1 based ( the first element has index 1 instead of index 0).

public class Solution {
	public ArrayList<ArrayList<Integer>> anagrams(final List<String> a) {
	    if(a == null){
	        return null;
	    }
	    
	    ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
	    Map<Integer,LinkedList<Integer>> hmap = new HashMap<Integer,LinkedList<Integer>>();
	    
	    int hashCode = 0;
	    int count = 1;
	    for(String word : a){
	        hashCode = 0;
	        for(int i = 0 ; i < word.length(); i++){
	            hashCode += word.charAt(i) - 'a';
	        }
	        
	        if(hmap.containsKey(hashCode)){
	            LinkedList llist = hmap.get(hashCode);
	            llist.add(count);
	            
	        } else {
	            LinkedList<Integer> llist = new LinkedList<Integer>();
	            llist.add(count);
	            hmap.put(hashCode, llist);
	        }
	        
	        count++;
	    }
	    
	    if(hmap.size() > 0){
	        for (LinkedList<Integer> llist : hmap.values()) {
	           ArrayList<Integer> list = new ArrayList<Integer>();
	                
	           for(Integer num: llist){
	               list.add(num);
	           }
	           result.add(list);
            }
	    }
	    
	    return result;
	}
}
